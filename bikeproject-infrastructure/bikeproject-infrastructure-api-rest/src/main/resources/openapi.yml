openapi: "3.0.0"
info:
  title: Bike Project API
  description: REST API to manage bike items
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: Bikes
  - name: Users
  - name: Authentication
paths:
  /users:
    post:
      operationId: register
      summary: Register a new user
      description: Registration of a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '201':
          description: User registered successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth:
    post:
      operationId: authenticate
      summary: Log in
      description: Authentication method for an already registered user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /bikes:
    post:
      operationId: createBike
      summary: Create a new bike
      description: Create a bike object
      tags:
        - Bikes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bike'
            examples:
              BikeExample:
                $ref: '#/components/examples/BikeExample'
      responses:
        '201':
          description: Bike created correctly
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    get:
      operationId: findBike
      summary: Find a bike
      description: Find a bike by multiple criteria
      tags:
        - Bikes
      parameters:
        - name: name
          in: query
          description: Filter by bike name
          schema:
            type: string
        - name: manufacturer
          in: query
          description: Filter by bike manufacturer
          schema:
            type: string
        - name: itemType
          in: query
          description: Filter by bike item type
          schema:
            type: string
        - name: orderBy
          in: query
          description: Order results by name
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: Retrieved bikes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bike'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserCredentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Bike:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: bike
        description:
          type: string
          example: a bike
        price:
          type: number
          format: float
          example: 100
        manufacturer:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
    Item:
      type: object
      required:
        - id
        - model
        - type
      properties:
        id:
          type: integer
          format: int64
        model:
          type: string
        type:
          type: string
        description:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT Token
  examples:
    BikeExample:
      value:
        id: 1
        name: 'bike'
        description: 'a bike'
        price: 100
        manufacturer: Specialized
        items:
          - id: 1
            model: Alpha comp
            type: Frame
            description: Lightweight and durable aluminum frame suitable for various riding styles.
          - id: 2
            model: DT Swiss XDR 1600
            type: wheelset
            description: Lightweight and durable aluminum wheelset for various riding styles.
    ItemExample:
      value:
        id: 3
        model: Fizik Ariante R3
        type: saddle
        description: Lightweight and comfortable saddle with ergonomic design.

security:
  - bearerAuth: [ ]